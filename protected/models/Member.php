<?phpclass Member extends _BaseModel{    public $password_confirm;    public $new_password;    public $hasPlayer = false;    public $error;    public $term_agreement = false;    public $agreeTermOfUse;    public $garbage_email;    public $checkboxSubscriber;	public function tableName()	{		return '{{_users}}';	}	public function rules()	{		return array(                    //begin - member registration - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number, checkboxSubscriber', 'safe', 'on'=>'create_membership'),                    array('email, password_hash, first_name, last_name, created_date, role_id, application_id, status, phone, relation_user, term_agreement', 'required', 'on'=>'create_membership'),                    array('email','unique','message'=>'This email address is not available','on'=>'create_membership'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'create_membership'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'create_membership'),                    array('phone, secondary_contact_number', 'length', 'min'=>1, 'max'=>20,'on'=>'create_membership'),                    array('password_confirm', 'compare', 'compareAttribute'=>'password_hash','on'=>'create_membership'),                    array('hasPlayer', 'required', 'message' => 'You must choose one player at least.', 'on'=>'create_membership'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'create_membership'),                    //end - member registration - hbao                    ////begin - member registration - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'update_membership'),                    array('email, first_name, last_name, created_date, role_id, application_id, status, phone, relation_user, term_agreement', 'required', 'on'=>'update_membership'),                    array('email','unique','message'=>'This email address is not available','on'=>'update_membership'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'create_membership'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'update_membership'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'update_membership'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'update_membership'),                    array('phone, secondary_contact_number', 'length', 'min'=>1, 'max'=>20,'on'=>'update_membership'),                    array('password_confirm', 'compare', 'compareAttribute'=>'password_hash','on'=>'update_membership'),                    array('hasPlayer', 'required', 'message' => 'You must choose one player at least.', 'on'=>'update_membership'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'update_membership'),                    //end - member registration - hbao                    //begin - member edit - hbao                    array('username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'edit_profile'),                    array('email, first_name, last_name, phone, relation_user', 'required', 'on'=>'edit_profile'),                    array('email','unique','message'=>'This email address is not available','on'=>'edit_profile'),                    array('email','email','message'=>'Please enter a valid email.','on'=>'edit_profile'),                    array('secondary_email','unique','message'=>'This email address is not available','on'=>'edit_profile'),                    array('secondary_email','email','message'=>'Please enter a valid email.','on'=>'edit_profile'),                    array('phone, secondary_contact_number', 'match','pattern'=>'/^[0-9\+\-\(\)\s]+$/','message'=>'Contact Number is not valid','on'=>'edit_profile'),                    //end - member edit - hbao                    //begin - change password - hbao                    array('password_hash, temp_password, new_password', 'safe', 'on'=>'change_password'),                    array('password_hash', 'length', 'min'=>6, 'max'=>32,'on'=>'change_password'),                    array('new_password', 'length', 'min'=>6, 'max'=>32,'on'=>'change_password'),                    array('password_confirm', 'compare', 'compareAttribute'=>'new_password','on'=>'change_password'),                    //end - change password - hbao                                        //KhoiNguyen registor member Widget                    array('first_name, last_name, email, temp_password, password_confirm', 'required', 'on'=>'widget_create_member'),                 // array('login_attemp, role_id, application_id, status, area_code_id, status_subscribe, relation_user', 'numerical', 'integerOnly'=>true),                   	array('first_name, last_name', 'length', 'max' => 100),                   	array('email', 'length', 'max'=>50),                   	array('email','unique','message'=>'This email address is not available','on'=>'widget_create_member'),                   	array('email','email','message'=>'Please enter a valid email.','on'=>'widget_create_member'),                   	array('temp_password', 'length', 'max' => 30, 'min' => 6),                   	array('temp_password, password_confirm', 'length', 'min' => PASSW_LENGTH_MIN, 'max' => PASSW_LENGTH_MAX,                   	    'tooLong' => 'Password is too long (maximum is ' . PASSW_LENGTH_MAX . ' characters).',                   	    'tooShort' => 'Password is too short (minimum is ' . PASSW_LENGTH_MIN . ' characters).',                   	    'on' => 'widget_create_member'),                   	array('temp_password', 'checkDigit', 'on' => 'widget_create_member'),                   	array('password_confirm', 'compare', 'compareAttribute'=>'temp_password','on'=>'widget_create_member'),                   	array('agreeTermOfUse', 'compare', 'compareValue' => 1, 'message' => 'You must agree to Term And Condition.', 'on' => 'widget_create_member'),                    array('id, username, email, password_hash, temp_password, first_name, last_name, first_char, login_attemp, created_date, last_logged_in, ip_address, role_id, application_id, status, gender, phone, verify_code, area_code_id, address, status_subscribe, company_name, relation_user, secondary_give_name, secondary_family_name, secondary_email, secondary_contact_number', 'safe', 'on'=>'search'),		);	}	public function checkDigit($attribute, $params) {	    if ($this->$attribute != '') {	        $containsDigit = preg_match('/[A-Za-z].*[0-9]|[0-9].*[A-Za-z]/', $this->$attribute);	        $lb = $this->getAttributeLabel($attribute);	        if (!$containsDigit)	            $this->addError($attribute, "$lb must be at least one letter and one number.");	    }	}	public function checkPhone($attribute, $params) {	    if ($this->$attribute != '') {	        $pattern = '/^[\+]?[\(]?(\+)?(\d{0,3})[\)]?[\s]?[\-]?(\d{0,9})[\s]?[\-]?(\d{0,9})[\s]?[x]?(\d*)$/';	        $containsDigit = preg_match($pattern, $this->$attribute);	        $lb = $this->getAttributeLabel($attribute);	        if (!$containsDigit)	            $this->addError($attribute, "$lb must be numerical and  allow input (),+,-");	    }	}	public function compareEmail($attribute, $params) {	    if ($this->email_confirm != $this->$attribute) {	        $this->addError("email_confirm", "$this->email_confirm email is wrong.");	    }	}	public function comparePassword($attribute, $params) 	{	    $lb = $this->getAttributeLabel($attribute);	    if (trim($this->currentPassword) == '')	        $this->addError($attribute, "$lb cannot be blank.");	    else {	        if (trim($this->currentPassword) != trim($this->temp_password) ) 	        {	            $this->addError($attribute, "$lb is wrong.");	        }else	        if (trim($this->password_hash) != md5(trim($this->currentPassword))) 	        {	            $this->addError($attribute, "$lb is wrong.");	        }	    }	}	public function relations()	{            return array(            );	}	public function attributeLabels()	{		return array(			'id' => 'ID',			'username' => 'Username',			'email' => 'Email',			'password_hash' => 'Password Hash',			'temp_password' => 'Password',			'first_name' => 'First Name',			'last_name' => 'Last Name',			'first_char' => 'First Char',			'login_attemp' => 'Login Attemp',			'created_date' => 'Created Date',			'last_logged_in' => 'Last Logged In',			'ip_address' => 'Ip Address',			'role_id' => 'Role',			'application_id' => 'Application',			'status' => 'Status',			'gender' => 'Gender',			'phone' => 'No',			'verify_code' => 'Verify Code',			'area_code_id' => 'Area Code',			'address' => 'Address',			'status_subscribe' => 'Status Subscribe',			'company_name' => 'Company Name',		);	}	public function search()	{		$criteria=new CDbCriteria;		$criteria->compare('t.id',$this->id,true);		$criteria->compare('t.username',$this->username,true);		$criteria->compare('t.email',$this->email,true);		$criteria->compare('t.password_hash',$this->password_hash,true);		$criteria->compare('t.temp_password',$this->temp_password,true);		$criteria->compare('t.first_name',$this->first_name,true);		$criteria->compare('t.last_name',$this->last_name,true);		$criteria->compare('t.first_char',$this->first_char,true);		$criteria->compare('t.login_attemp',$this->login_attemp);		$criteria->compare('t.created_date',$this->created_date,true);		$criteria->compare('t.last_logged_in',$this->last_logged_in,true);		$criteria->compare('t.ip_address',$this->ip_address,true);		$criteria->compare('t.role_id',$this->role_id);		$criteria->compare('t.application_id',$this->application_id);		$criteria->compare('t.status',STATUS_ACTIVE);		$criteria->compare('t.gender',$this->gender,true);		$criteria->compare('t.phone',$this->phone,true);		$criteria->compare('t.verify_code',$this->verify_code,true);		$criteria->compare('t.area_code_id',$this->area_code_id);		$criteria->compare('t.address',$this->address,true);		$criteria->compare('t.status_subscribe',$this->status_subscribe);		$criteria->compare('t.company_name',$this->company_name,true);		$criteria->compare('t.relation_user',$this->relation_user);		$criteria->compare('t.secondary_give_name',$this->secondary_give_name,true);		$criteria->compare('t.secondary_family_name',$this->secondary_family_name,true);		$criteria->compare('t.secondary_email',$this->secondary_email,true);		$criteria->compare('t.secondary_contact_number',$this->secondary_contact_number,true);                $criteria->order = 'created_date DESC';		return new CActiveDataProvider($this, array(                    'criteria'=>$criteria,                    'pagination'=>array(                        'pageSize'=> Yii::app()->user->getState('pageSize',Yii::app()->params['defaultPageSize']),                    ),		));	}    public function activate()    {        $this->status = 1;        $this->update();    }    public function deactivate()    {        $this->status = 0;        $this->update();    }	public function defaultScope()	{		return array(			//'condition'=>'',		);	}    /*public static function checkEmail($model) {        if(empty($model->email)) return '';        $criteria=new CDbCriteria;        $criteria->compare('t.email', trim($model->email));        $user = self::model()->find($criteria);        if(empty($user->id)) return '';        $can_date = date('Y-m-d H:i:s', strtotime("-12 hour", time()));        if($user->status == 2 && strtotime($can_date) > strtotime($user->created_date)){            $user->delete();        }        if($user->status == 2 && strtotime($can_date) <= strtotime($user->created_date)){            return 'garbage_email';        }    }    //hbao    protected function beforeDelete(){        //delete all Order        $orders = RegistrationOrder::findByUser($this->id);        if(!empty($orders)){            foreach ($orders as $order) {                $order->delete();            }        }        //delete all player        $players = Player::findByUser($this->id);        if(!empty($players)){            foreach ($players as $player) {                $player->delete();            }        }        IsaTournamentOrder::deleteTournamentOrderByUserId($this->id);        IsaSeasonOrder::deleteSeasonOrderByUserId($this->id);        return parent::beforeDelete();    }*/}